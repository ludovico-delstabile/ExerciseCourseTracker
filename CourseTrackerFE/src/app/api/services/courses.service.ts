/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCourse$Json } from '../fn/courses/add-course-json';
import { AddCourse$Json$Params } from '../fn/courses/add-course-json';
import { addCourse$Plain } from '../fn/courses/add-course-plain';
import { AddCourse$Plain$Params } from '../fn/courses/add-course-plain';
import { CourseDto } from '../models/course-dto';
import { editCourse$Json } from '../fn/courses/edit-course-json';
import { EditCourse$Json$Params } from '../fn/courses/edit-course-json';
import { editCourse$Plain } from '../fn/courses/edit-course-plain';
import { EditCourse$Plain$Params } from '../fn/courses/edit-course-plain';
import { getCourses$Json } from '../fn/courses/get-courses-json';
import { GetCourses$Json$Params } from '../fn/courses/get-courses-json';
import { getCourses$Plain } from '../fn/courses/get-courses-plain';
import { GetCourses$Plain$Params } from '../fn/courses/get-courses-plain';

@Injectable({ providedIn: 'root' })
export class CoursesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCourses()` */
  static readonly GetCoursesPath = '/api/Courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCourses$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourses$Plain$Response(params?: GetCourses$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CourseDto>>> {
    return getCourses$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCourses$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourses$Plain(params?: GetCourses$Plain$Params, context?: HttpContext): Observable<Array<CourseDto>> {
    return this.getCourses$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CourseDto>>): Array<CourseDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCourses$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourses$Json$Response(params?: GetCourses$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CourseDto>>> {
    return getCourses$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCourses$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourses$Json(params?: GetCourses$Json$Params, context?: HttpContext): Observable<Array<CourseDto>> {
    return this.getCourses$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CourseDto>>): Array<CourseDto> => r.body)
    );
  }

  /** Path part for operation `addCourse()` */
  static readonly AddCoursePath = '/api/Courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCourse$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addCourse$Plain$Response(params?: AddCourse$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseDto>> {
    return addCourse$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCourse$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addCourse$Plain(params?: AddCourse$Plain$Params, context?: HttpContext): Observable<CourseDto> {
    return this.addCourse$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseDto>): CourseDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCourse$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addCourse$Json$Response(params?: AddCourse$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseDto>> {
    return addCourse$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCourse$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addCourse$Json(params?: AddCourse$Json$Params, context?: HttpContext): Observable<CourseDto> {
    return this.addCourse$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseDto>): CourseDto => r.body)
    );
  }

  /** Path part for operation `editCourse()` */
  static readonly EditCoursePath = '/api/Courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editCourse$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  editCourse$Plain$Response(params?: EditCourse$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseDto>> {
    return editCourse$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editCourse$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  editCourse$Plain(params?: EditCourse$Plain$Params, context?: HttpContext): Observable<CourseDto> {
    return this.editCourse$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseDto>): CourseDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editCourse$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  editCourse$Json$Response(params?: EditCourse$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseDto>> {
    return editCourse$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editCourse$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  editCourse$Json(params?: EditCourse$Json$Params, context?: HttpContext): Observable<CourseDto> {
    return this.editCourse$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseDto>): CourseDto => r.body)
    );
  }

}
