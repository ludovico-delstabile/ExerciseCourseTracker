/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiLoginPost$Json } from '../fn/login/api-login-post-json';
import { ApiLoginPost$Json$Params } from '../fn/login/api-login-post-json';
import { apiLoginPost$Plain } from '../fn/login/api-login-post-plain';
import { ApiLoginPost$Plain$Params } from '../fn/login/api-login-post-plain';

@Injectable({ providedIn: 'root' })
export class LoginService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiLoginPost()` */
  static readonly ApiLoginPostPath = '/api/Login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLoginPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginPost$Plain$Response(params?: ApiLoginPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiLoginPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLoginPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginPost$Plain(params?: ApiLoginPost$Plain$Params, context?: HttpContext): Observable<string> {
    return this.apiLoginPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLoginPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginPost$Json$Response(params?: ApiLoginPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiLoginPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLoginPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginPost$Json(params?: ApiLoginPost$Json$Params, context?: HttpContext): Observable<string> {
    return this.apiLoginPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
