/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addUser$Json } from '../fn/users/add-user-json';
import { AddUser$Json$Params } from '../fn/users/add-user-json';
import { addUser$Plain } from '../fn/users/add-user-plain';
import { AddUser$Plain$Params } from '../fn/users/add-user-plain';
import { getUsers$Json } from '../fn/users/get-users-json';
import { GetUsers$Json$Params } from '../fn/users/get-users-json';
import { getUsers$Plain } from '../fn/users/get-users-plain';
import { GetUsers$Plain$Params } from '../fn/users/get-users-plain';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getUsers()` */
  static readonly GetUsersPath = '/api/Users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsers$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Plain$Response(params?: GetUsers$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getUsers$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsers$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Plain(params?: GetUsers$Plain$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getUsers$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsers$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Json$Response(params?: GetUsers$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getUsers$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsers$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Json(params?: GetUsers$Json$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getUsers$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `addUser()` */
  static readonly AddUserPath = '/api/Users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUser$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addUser$Plain$Response(params?: AddUser$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return addUser$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUser$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addUser$Plain(params?: AddUser$Plain$Params, context?: HttpContext): Observable<UserDto> {
    return this.addUser$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUser$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addUser$Json$Response(params?: AddUser$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return addUser$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUser$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addUser$Json(params?: AddUser$Json$Params, context?: HttpContext): Observable<UserDto> {
    return this.addUser$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

}
